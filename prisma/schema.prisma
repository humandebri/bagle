generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model categories {
  id          String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String
  description String?
  created_at  DateTime   @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  updated_at  DateTime   @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  products    products[]
}

model orders {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id           String
  created_at        DateTime? @default(now()) @db.Timestamptz(6)
  items             Json
  dispatch_date     String?
  dispatch_time     String?
  total_price       Int?
  customer_name     String?
  phone             String?
  shipped           Boolean?
  payment_intent_id String?
  payment_status    String?   @default("pending")
  captured_at       DateTime? @db.Timestamptz(6)
  profiles          profiles  @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_profile")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model product_tags {
  product_id String   @db.Uuid
  tag_id     String   @db.Uuid
  products   products @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([product_id, tag_id])
}

model products {
  id               String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name             String
  description      String
  long_description String?
  price            Int
  image            String?
  is_available     Boolean?       @default(true)
  is_limited       Boolean?       @default(false)
  start_date       DateTime?      @db.Timestamptz(6)
  end_date         DateTime?      @db.Timestamptz(6)
  category_id      String?        @db.Uuid
  created_at       DateTime       @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  updated_at       DateTime       @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  product_tags     product_tags[]
  categories       categories?    @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model profiles {
  user_id     String   @id
  email       String?
  first_name  String?
  last_name   String?
  phone       String?
  customer_id String?
  is_admin    Boolean? @default(false)
  orders      orders[]
}

model time_slots {
  id               String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  date             DateTime @db.Date
  time             DateTime @db.Time(6)
  max_capacity     Int
  current_bookings Int?     @default(0)
  is_available     Boolean? @default(true)
  created_at       DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)

  @@unique([date, time], map: "uniq_date_time")
}
