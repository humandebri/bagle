generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model categories {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  description String?
  created_at  DateTime   @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  updated_at  DateTime   @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  products    products[]
}

model orders {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id           String
  created_at        DateTime? @default(now()) @db.Timestamptz(6)
  items             Json
  dispatch_date     String?
  dispatch_time     String?
  total_price       Int?
  customer_name     String?
  phone             String?
  shipped           Boolean?
  payment_intent_id String?
  payment_status    String?
  profiles          profiles  @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_profile")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model product_tags {
  product_id String   @db.Uuid
  tag_id     String   @db.Uuid
  products   products @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([product_id, tag_id])
}

model products {
  id                 String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name               String
  description        String
  long_description   String?
  price              Int
  image              String?
  image_webp         String?
  image_optimized_at DateTime?      @db.Timestamptz(6)
  is_available       Boolean?       @default(true)
  is_limited         Boolean?       @default(false)
  start_date         DateTime?      @db.Timestamptz(6)
  end_date           DateTime?      @db.Timestamptz(6)
  category_id        String?        @db.Uuid
  created_at         DateTime       @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  updated_at         DateTime       @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  product_tags       product_tags[]
  categories         categories?    @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model profiles {
  user_id     String   @id
  email       String?
  first_name  String?
  last_name   String?
  phone       String?
  customer_id String?
  is_admin    Boolean? @default(false)
  orders      orders[]
}

model time_slots {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date             DateTime @db.Date
  time             DateTime @db.Time(6)
  max_capacity     Int
  current_bookings Int?     @default(0)
  is_available     Boolean? @default(true)
  created_at       DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)

  @@unique([date, time], map: "uniq_date_time")
}

model business_days {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date       DateTime @unique @db.Date
  is_open    Boolean  @default(true)
  is_special Boolean  @default(false)
  notes      String?
  created_at DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  updated_at DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
}

model business_hours {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  day_of_week Int       @unique
  open_time   DateTime? @db.Time(6)
  close_time  DateTime? @db.Time(6)
  is_closed   Boolean   @default(false)
  created_at  DateTime  @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  updated_at  DateTime  @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
}

model recurring_holidays {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  type       String
  pattern    Json
  is_active  Boolean  @default(true)
  created_at DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  updated_at DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
}

model news {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date         String
  title        String
  content      String
  is_published Boolean  @default(true)
  created_at   DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
}

model slot_reservations {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  session_id String
  date       DateTime @db.Date
  time       DateTime @db.Time(6)
  created_at DateTime @default(now()) @db.Timestamptz(6)
  expires_at DateTime @db.Timestamptz(6)

  @@unique([session_id, date, time])
  @@index([expires_at])
  @@index([date, time])
}
